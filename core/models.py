import random

from django.contrib.auth.models import User
from django.db import models
from django.utils import timezone
from django.utils.translation import gettext_lazy as _


def generateOrderNumber():
    return random.randint(1000000000, 9999999999)


class BaseModel(models.Model):
    createdDttm = models.DateTimeField(default=timezone.now)
    modifiedDttm = models.DateTimeField(auto_now=True)
    reference = models.CharField(max_length=2048, blank=True, null=True)
    deleteFl = models.BooleanField(default=False)
    orderNo = models.IntegerField(default=1, blank=True, null=True)
    versionNo = models.IntegerField(default=1, blank=True, null=True)

    class Meta:
        abstract = True


class Address(BaseModel):
    class Country(models.TextChoices):
        AF = 'AF', _('Afghanistan')
        AL = 'AL', _('Albania')
        DZ = 'DZ', _('Algeria')
        AS = 'AS', _('American Samoa')
        AD = 'AD', _('Andorra')
        AO = 'AO', _('Angola')
        AI = 'AI', _('Anguilla')
        AQ = 'AQ', _('Antarctica')
        AG = 'AG', _('Antigua and Barbuda')
        AR = 'AR', _('Argentina')
        AM = 'AM', _('Armenia')
        AW = 'AW', _('Aruba')
        AU = 'AU', _('Australia')
        AT = 'AT', _('Austria')
        AZ = 'AZ', _('Azerbaijan')
        BS = 'BS', _('Bahamas')
        BH = 'BH', _('Bahrain')
        BD = 'BD', _('Bangladesh')
        BB = 'BB', _('Barbados')
        BY = 'BY', _('Belarus')
        BE = 'BE', _('Belgium')
        BZ = 'BZ', _('Belize')
        BJ = 'BJ', _('Benin')
        BM = 'BM', _('Bermuda')
        BT = 'BT', _('Bhutan')
        BO = 'BO', _('Bolivia (Plurinational State of)')
        BQ = 'BQ', _('Bonaire, Sint Eustatius and Saba')
        BA = 'BA', _('Bosnia and Herzegovina')
        BW = 'BW', _('Botswana')
        BV = 'BV', _('Bouvet Island')
        BR = 'BR', _('Brazil')
        IO = 'IO', _('British Indian Ocean Territory')
        BN = 'BN', _('Brunei Darussalam')
        BG = 'BG', _('Bulgaria')
        BF = 'BF', _('Burkina Faso')
        BI = 'BI', _('Burundi')
        CV = 'CV', _('Cabo Verde')
        KH = 'KH', _('Cambodia')
        CM = 'CM', _('Cameroon')
        CA = 'CA', _('Canada')
        KY = 'KY', _('Cayman Islands')
        CF = 'CF', _('Central African Republic')
        TD = 'TD', _('Chad')
        CL = 'CL', _('Chile')
        CN = 'CN', _('China')
        CX = 'CX', _('Christmas Island')
        CC = 'CC', _('Cocos (Keeling) Islands')
        CO = 'CO', _('Colombia')
        KM = 'KM', _('Comoros')
        CD = 'CD', _('Congo (the Democratic Republic of the)')
        CG = 'CG', _('Congo')
        CK = 'CK', _('Cook Islands')
        CR = 'CR', _('Costa Rica')
        HR = 'HR', _('Croatia')
        CU = 'CU', _('Cuba')
        CW = 'CW', _('Curaçao')
        CY = 'CY', _('Cyprus')
        CZ = 'CZ', _('Czechia')
        CI = 'CI', _('Côte d\'Ivoire')
        DK = 'DK', _('Denmark')
        DJ = 'DJ', _('Djibouti')
        DM = 'DM', _('Dominica')
        DO = 'DO', _('Dominican Republic')
        EC = 'EC', _('Ecuador')
        EG = 'EG', _('Egypt')
        SV = 'SV', _('El Salvador')
        GQ = 'GQ', _('Equatorial Guinea')
        ER = 'ER', _('Eritrea')
        EE = 'EE', _('Estonia')
        SZ = 'SZ', _('Eswatini')
        ET = 'ET', _('Ethiopia')
        FK = 'FK', _('Falkland Islands [Malvinas]')
        FO = 'FO', _('Faroe Islands')
        FJ = 'FJ', _('Fiji')
        FI = 'FI', _('Finland')
        FR = 'FR', _('France')
        GF = 'GF', _('French Guiana')
        PF = 'PF', _('French Polynesia')
        TF = 'TF', _('French Southern Territories')
        GA = 'GA', _('Gabon')
        GM = 'GM', _('Gambia')
        GE = 'GE', _('Georgia')
        DE = 'DE', _('Germany')
        GH = 'GH', _('Ghana')
        GI = 'GI', _('Gibraltar')
        GR = 'GR', _('Greece')
        GL = 'GL', _('Greenland')
        GD = 'GD', _('Grenada')
        GP = 'GP', _('Guadeloupe')
        GU = 'GU', _('Guam')
        GT = 'GT', _('Guatemala')
        GG = 'GG', _('Guernsey')
        GN = 'GN', _('Guinea')
        GW = 'GW', _('Guinea-Bissau')
        GY = 'GY', _('Guyana')
        HT = 'HT', _('Haiti')
        HM = 'HM', _('Heard Island and McDonald Islands')
        VA = 'VA', _('Holy See')
        HN = 'HN', _('Honduras')
        HK = 'HK', _('Hong Kong')
        HU = 'HU', _('Hungary')
        IS = 'IS', _('Iceland')
        IN = 'IN', _('India')
        ID = 'ID', _('Indonesia')
        IR = 'IR', _('Iran (Islamic Republic of)')
        IQ = 'IQ', _('Iraq')
        IE = 'IE', _('Ireland')
        IM = 'IM', _('Isle of Man')
        IL = 'IL', _('Israel')
        IT = 'IT', _('Italy')
        JM = 'JM', _('Jamaica')
        JP = 'JP', _('Japan')
        JE = 'JE', _('Jersey')
        JO = 'JO', _('Jordan')
        KZ = 'KZ', _('Kazakhstan')
        KE = 'KE', _('Kenya')
        KI = 'KI', _('Kiribati')
        KP = 'KP', _('Korea (the Democratic People\'s Republic of)')
        KR = 'KR', _('Korea (the Republic of)')
        KW = 'KW', _('Kuwait')
        KG = 'KG', _('Kyrgyzstan')
        LA = 'LA', _('Lao People\'s Democratic Republic')
        LV = 'LV', _('Latvia')
        LB = 'LB', _('Lebanon')
        LS = 'LS', _('Lesotho')
        LR = 'LR', _('Liberia')
        LY = 'LY', _('Libya')
        LI = 'LI', _('Liechtenstein')
        LT = 'LT', _('Lithuania')
        LU = 'LU', _('Luxembourg')
        MO = 'MO', _('Macao')
        MG = 'MG', _('Madagascar')
        MW = 'MW', _('Malawi')
        MY = 'MY', _('Malaysia')
        MV = 'MV', _('Maldives')
        ML = 'ML', _('Mali')
        MT = 'MT', _('Malta')
        MH = 'MH', _('Marshall Islands')
        MQ = 'MQ', _('Martinique')
        MR = 'MR', _('Mauritania')
        MU = 'MU', _('Mauritius')
        YT = 'YT', _('Mayotte')
        MX = 'MX', _('Mexico')
        FM = 'FM', _('Micronesia (Federated States of)')
        MD = 'MD', _('Moldova (the Republic of)')
        MC = 'MC', _('Monaco')
        MN = 'MN', _('Mongolia')
        ME = 'ME', _('Montenegro')
        MS = 'MS', _('Montserrat')
        MA = 'MA', _('Morocco')
        MZ = 'MZ', _('Mozambique')
        MM = 'MM', _('Myanmar')
        NA = 'NA', _('Namibia')
        NR = 'NR', _('Nauru')
        NP = 'NP', _('Nepal')
        NL = 'NL', _('Netherlands')
        NC = 'NC', _('New Caledonia')
        NZ = 'NZ', _('New Zealand')
        NI = 'NI', _('Nicaragua')
        NE = 'NE', _('Niger')
        NG = 'NG', _('Nigeria')
        NU = 'NU', _('Niue')
        NF = 'NF', _('Norfolk Island')
        MP = 'MP', _('Northern Mariana Islands')
        NO = 'NO', _('Norway')
        OM = 'OM', _('Oman')
        PK = 'PK', _('Pakistan')
        PW = 'PW', _('Palau')
        PS = 'PS', _('Palestine, State of')
        PA = 'PA', _('Panama')
        PG = 'PG', _('Papua New Guinea')
        PY = 'PY', _('Paraguay')
        PE = 'PE', _('Peru')
        PH = 'PH', _('Philippines')
        PN = 'PN', _('Pitcairn')
        PL = 'PL', _('Poland')
        PT = 'PT', _('Portugal')
        PR = 'PR', _('Puerto Rico')
        QA = 'QA', _('Qatar')
        MK = 'MK', _('Republic of North Macedonia')
        RO = 'RO', _('Romania')
        RU = 'RU', _('Russian Federation')
        RW = 'RW', _('Rwanda')
        RE = 'RE', _('Réunion')
        BL = 'BL', _('Saint Barthélemy')
        SH = 'SH', _('Saint Helena, Ascension and Tristan da Cunha')
        KN = 'KN', _('Saint Kitts and Nevis')
        LC = 'LC', _('Saint Lucia')
        MF = 'MF', _('Saint Martin (French part)')
        PM = 'PM', _('Saint Pierre and Miquelon')
        VC = 'VC', _('Saint Vincent and the Grenadines')
        WS = 'WS', _('Samoa')
        SM = 'SM', _('San Marino')
        ST = 'ST', _('Sao Tome and Principe')
        SA = 'SA', _('Saudi Arabia')
        SN = 'SN', _('Senegal')
        RS = 'RS', _('Serbia')
        SC = 'SC', _('Seychelles')
        SL = 'SL', _('Sierra Leone')
        SG = 'SG', _('Singapore')
        SX = 'SX', _('Sint Maarten (Dutch part)')
        SK = 'SK', _('Slovakia')
        SI = 'SI', _('Slovenia')
        SB = 'SB', _('Solomon Islands')
        SO = 'SO', _('Somalia')
        ZA = 'ZA', _('South Africa')
        GS = 'GS', _('South Georgia and the South Sandwich Islands')
        SS = 'SS', _('South Sudan')
        ES = 'ES', _('Spain')
        LK = 'LK', _('Sri Lanka')
        SD = 'SD', _('Sudan')
        SR = 'SR', _('Suriname')
        SJ = 'SJ', _('Svalbard and Jan Mayen')
        SE = 'SE', _('Sweden')
        CH = 'CH', _('Switzerland')
        SY = 'SY', _('Syrian Arab Republic')
        TW = 'TW', _('Taiwan (Province of China)')
        TJ = 'TJ', _('Tajikistan')
        TZ = 'TZ', _('Tanzania, United Republic of')
        TH = 'TH', _('Thailand')
        TL = 'TL', _('Timor-Leste')
        TG = 'TG', _('Togo')
        TK = 'TK', _('Tokelau')
        TO = 'TO', _('Tonga')
        TT = 'TT', _('Trinidad and Tobago')
        TN = 'TN', _('Tunisia')
        TR = 'TR', _('Turkey')
        TM = 'TM', _('Turkmenistan')
        TC = 'TC', _('Turks and Caicos Islands')
        TV = 'TV', _('Tuvalu')
        UG = 'UG', _('Uganda')
        UA = 'UA', _('Ukraine')
        AE = 'AE', _('United Arab Emirates')
        GB = 'GB', _('United Kingdom of Great Britain and Northern Ireland')
        UM = 'UM', _('United States Minor Outlying Islands')
        US = 'US', _('United States of America')
        UY = 'UY', _('Uruguay')
        UZ = 'UZ', _('Uzbekistan')
        VU = 'VU', _('Vanuatu')
        VE = 'VE', _('Venezuela (Bolivarian Republic of)')
        VN = 'VN', _('Viet Nam')
        VG = 'VG', _('Virgin Islands (British)')
        VI = 'VI', _('Virgin Islands (U.S.)')
        WF = 'WF', _('Wallis and Futuna')
        EH = 'EH', _('Western Sahara')
        YE = 'YE', _('Yemen')
        ZM = 'ZM', _('Zambia')
        ZW = 'ZW', _('Zimbabwe')
        AX = 'AX', _('Åland Islands')

    user = models.ForeignKey(User, on_delete=models.DO_NOTHING, related_name='address')
    addressLine1 = models.CharField(max_length=32)
    addressLine2 = models.CharField(max_length=32, blank=True, null=True)
    town = models.CharField(max_length=32)
    county = models.CharField(max_length=32, blank=True, null=True)
    postcode = models.CharField(max_length=32)
    country = models.CharField(max_length=32, choices=Country.choices, default=Country.GB)
    isPrimary = models.BooleanField(default=False)


class Item(BaseModel):
    class Type(models.TextChoices):
        BUY_IT_NOW = 'BUY_IT_NOW', _('Buy It Now')
        AUCTION = 'AUCTION', _('Auction')

    class Condition(models.TextChoices):
        NEW = 'NEW', _('New')
        USED = 'USED', _('Used')
        OPENED_NEVER_USED = 'OPENED_NEVER_USED', _('Opened – never used')
        SELLER_REFURBISHED = 'SELLER_REFURBISHED', _('Seller refurbished')
        FOR_PARTS_OR_NOT_WORKING = 'FOR_PARTS_OR_NOT_WORKING', _('For parts or not working')

    seller = models.ForeignKey(User, on_delete=models.DO_NOTHING, related_name='sellerItems')
    title = models.CharField(max_length=1024)
    description = models.TextField(blank=True, null=True)
    expireDate = models.DateTimeField(blank=True, null=True)
    price = models.DecimalField(max_digits=9, decimal_places=2)
    deliveryCharge = models.DecimalField(blank=True, null=True, max_digits=9, decimal_places=2)
    type = models.CharField(max_length=16, choices=Type.choices, default=Type.BUY_IT_NOW)
    condition = models.CharField(max_length=32, choices=Condition.choices, default=Condition.NEW)
    stock = models.PositiveSmallIntegerField(default=1)

    def __str__(self):
        return self.title

    def isExpired(self):
        return self.expireDate > timezone.now()


class Image(BaseModel):
    item = models.ForeignKey(Item, on_delete=models.CASCADE, related_name='itemImages')
    image = models.ImageField(upload_to='uploads/%Y/%m/%d')


class Bid(BaseModel):
    item = models.ForeignKey(Item, on_delete=models.CASCADE, related_name='itemBids')
    bidder = models.ForeignKey(User, on_delete=models.CASCADE, related_name='bidderBids')
    price = models.DecimalField(max_digits=9, decimal_places=2)


class Order(BaseModel):
    item = models.ForeignKey(Item, on_delete=models.CASCADE, related_name='itemOrders')
    buyer = models.ForeignKey(User, on_delete=models.DO_NOTHING, related_name='buyerOrders')
    total = models.DecimalField(max_digits=9, decimal_places=2)
    number = models.CharField(max_length=16, unique=True, default=generateOrderNumber)
    quantity = models.PositiveSmallIntegerField()
    tracking = models.CharField(blank=True, null=True, max_length=64)


class OrderStatus(BaseModel):
    class Status(models.TextChoices):
        ORDERED = 'ORDERED', _('Ordered')
        PROCESSING = 'PROCESSING', _('Processing')
        CANCELLED = 'CANCELLED', _('Cancelled')
        DISPATCHED = 'DISPATCHED', _('Dispatched')
        DELIVERED = 'DELIVERED', _('Delivered')
        DISPUTED = 'DISPUTED', _('Disputed')
        RETURN_STARTED = 'RETURN_STARTED', _('Return Started')
        RETURN_ACCEPTED = 'RETURN_ACCEPTED', _('Return Accepted')
        RETURN_REJECTED = 'RETURN_REJECTED', _('Return Rejected')
        RETURNED = 'RETURNED', _('Returned')
        REFUNDED = 'REFUNDED', _('Refunded')

    status = models.CharField(max_length=32, choices=Status.choices, default=Status.DISPATCHED)
    description = models.TextField(blank=True, null=True)
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='orderStatus')


class Review(BaseModel):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='orderReviews')
    summary = models.CharField(max_length=1024)
    description = models.TextField()
    rating = models.PositiveSmallIntegerField()


class Note(BaseModel):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='orderNotes')
    summary = models.CharField(max_length=1024)
    description = models.TextField()


class Communication(BaseModel):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='orderCommunications')
    message = models.TextField()
